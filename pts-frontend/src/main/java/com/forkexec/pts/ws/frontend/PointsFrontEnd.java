package com.forkexec.pts.ws.frontend;

import java.util.Collection;
import java.util.ArrayList;

import java.util.regex.Pattern;

import com.forkexec.pts.ws.BadInitFault_Exception;
import com.forkexec.pts.ws.InvalidEmailFault_Exception;
import com.forkexec.pts.ws.InvalidPointsFault_Exception;
import com.forkexec.pts.ws.InvalidPointsFault;
import com.forkexec.pts.ws.cli.PointsClient;
import com.forkexec.pts.ws.cli.PointsClientException;
import com.forkexec.pts.ws.Value;
import com.forkexec.pts.ws.Tag;

import com.forkexec.pts.ws.cli.exception.*;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;

/**
 * FrontEnd port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class PointsFrontEnd {

  /** UDDI server URL */
  private String uddiURL = null;

  /** Number of backup servers */
  private int N = 0;

  private static Collection<String> urls;

  /** Constant, service prefix */
  private final String POINTS = "A41_Points";

  /** Constant, acknowledge */
  private final String SUCCESS = "ACK";

  /** output option **/
  private boolean verbose = false;

  private static class SingletonHolder {
    private static final PointsClient INSTANCE = new PointsClient(urls);
  }

  public static synchronized PointsClient getInstance() {
    return SingletonHolder.INSTANCE;
  }


  public boolean isVerbose() {
    return verbose;
  }

  public void setVerbose(boolean verbose) {
    this.verbose = verbose;
  }

  /** constructor with provided UDDI location and name */
  public PointsFrontEnd(String uddiURL, int N) {
    this.uddiURL = uddiURL;
    this.N = N;
    listUrls();
  }

  /** UDDI lookup */
  private String uddiLookup(String wsName) {
    String wsURL;
    try {
      if (verbose)
        System.out.printf("Contacting UDDI at %s%n", uddiURL);
      UDDINaming uddiNaming = new UDDINaming(uddiURL);

      if (verbose)
        System.out.printf("Looking for '%s'%n", wsName);
      wsURL = uddiNaming.lookup(wsName);

    } catch (Exception e) {
      String msg = String.format("FrontEnd failed lookup on UDDI at %s!", uddiURL);
      throw new RuntimeException(msg);
    }

    if (wsURL == null) {
      String msg = String.format("Service with name %s not found on UDDI at %s", wsName, uddiURL);
      throw new RuntimeException(msg);
    }

    return wsURL;
  }

  private void listUrls() {
    Collection<String> replicas = new ArrayList<>();
    for (int i = 0; i < N; i++)
      replicas.add(uddiLookup(POINTS + Integer.toString(i+1)));
    this.urls = replicas;
  }

  // remote invocation methods ----------------------------------------------

  public void activateUser(String userEmail) throws EmailAlreadyExistsFault_Exception, InvalidEmailFault_Exception {
    getInstance().activateUser(userEmail);
  }

  public int pointsBalance(String userEmail) throws InvalidEmailFault_Exception {
    return getInstance().pointsBalance(userEmail);
  }

  public int addPoints(String userEmail, int pointsToAdd) throws InvalidEmailFault_Exception, InvalidPointsFault_Exception {
    return getInstance().addPoints(userEmail, pointsToAdd);
  }

  public int spendPoints(String userEmail, int pointsToSpend) throws InvalidEmailFault_Exception, InvalidPointsFault_Exception, NotEnoughBalanceFault_Exception {
    return getInstance().spendPoints(userEmail, pointsToSpend);
  }

  // control operations -----------------------------------------------------

  public String ctrlPing(String inputMessage) {
    return getInstance().ctrlPing(inputMessage);
  }

  public void ctrlClear() {
    getInstance().ctrlClear();
  }

  public void ctrlInit(int startPoints) throws BadInitFault_Exception {
    getInstance().ctrlInit(startPoints);
  }

}
